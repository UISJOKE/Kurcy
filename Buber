from random import randint

errors = {1: 'invalid login or password'}
drivers = {55555: {'Name': 'Murat', 'Location': randint(1, 150), 'E-mail': 'Murat334@gmail.com', 'Password': '12345',
                   'Model': 'Mazda', 'Number': '5467BE-7', 'Type': 'Sedan',
                   'Seats': 4}}
users = {}
orders = {}
my_user_online = {}
admins = {11111: {'E-mail': 'thedeadtwitch@gmail.com', 'Password': 'admin'}}


class User:
    def __init__(self, user_name):
        self.name = user_name
        self.location = randint(1, 150)

    @staticmethod
    def login(user_email, user_password):
        for myuser in users.values():
            if myuser['E-mail'] == user_email and myuser['Password'] == user_password:
                return 'Hello, ' + myuser['Name']
            return errors[1]

    @staticmethod
    def registration(user_email, user_name, user_password, user_location):
        user_id = randint(10000, 99999)
        if user_id not in drivers.keys():
            users.update({user_id: {'Name': user_name, 'E-mail': user_email, 'Password': user_password,
                                    'Location': user_location}})


class Admin:
    def __init__(self, admin_name):
        super().__init__(admin_name)

    @staticmethod
    def login(admin_email, admin_password):
        for myadmin in admins.values():
            if myadmin['E-mail'] == admin_email and myadmin['Password'] == admin_password:
                return 'Hello, ' + myadmin['Name']
            return errors[1]


class Driver:
    def __init__(self, driver_name, driver_location, auto):
        self.name = driver_name
        self.location = driver_location
        self.car = auto

    @staticmethod
    def login(driver_email, driver_password):
        for myuser in drivers.values():
            if myuser['E-mail'] == driver_email and myuser['Password'] == driver_password:
                return 'Hello, ' + myuser['Name']
            return errors[1]

    @staticmethod
    def registration(driver_email, driver_name, driver_password, driver_model_car, driver_car_number, driver_type_car,
                     driver_seats_in_car):
        user_id = randint(10000, 99999)
        if user_id not in drivers.keys():
            drivers.update({user_id: {'Name': driver_name, 'E-mail': driver_email, 'Password': driver_password,
                                      'Model': driver_model_car, 'Number': driver_car_number, 'Type': driver_type_car,
                                      'Seats': driver_seats_in_car}})

    def __str__(self):
        return f'Name: {self.name}\nLocation: {self.location}\n{self.car}'


class Order:
    PRICEFORKM = 0.6
    SPEED = 40

    def __init__(self, end_point):
        self.driver = drivers[choice]
        self.distance = my_user_online['Location'] - drivers[choice]['Location']
        self.point = end_point
        self.price = int((self.point - drivers[choice]['Location']) * self.PRICEFORKM)
        self.arrivaltime = int((self.distance / self.SPEED) * 60)
        self.timetravel = int(((self.point - self.distance) // self.SPEED) * 60)
        self.distancetravel = self.point - drivers[choice]['Location']

    def __str__(self):
        return f'{self.driver}\nEnd point: {self.point}\nPrice: {self.price}р.\n' \
               f'Arivval car time: {self.arrivaltime} min.\nTravel Time: {self.timetravel} min.\n' \
               f'Travel Distance: {self.distancetravel} km.\n '


while True:
    request = int(input('''1 - Driver registration
2 - Login as driver
3 - User registration
4 - Login as user
5 - Login as admin
6 - Make order
'''))
    if request == 1:
        email = input('Input E-mail: ')
        name = input('Input name: ')
        password = input('Input password: ')
        model_car = input('Input model car: ')
        car_number = input('Input car number: ')
        type_car = input('Input car type: ')
        seats_in_car = int(input('Input car count of seats: '))
        Driver.registration(email, name, password, model_car, car_number, type_car, seats_in_car)
        print('Регистрация завершена!')
    elif request == 2:
        email = input('Input E-mail: ')
        signal = True
        for user in drivers.values():
            if email in user['E-mail']:
                password = input('Input password: ')
                if password in user['Password']:
                    print('Hello, ' + user['Name'])
                else:
                    print(errors[1])
    elif request == 3:
        email = input('Input E-mail: ')
        name = input('Input name: ')
        password = input('Input password: ')
        location = randint(1, 150)
        User.registration(email, name, password, location)
        print('Регистрация завершена!')
    elif request == 4:
        email = input('Input E-mail: ')
        signal = True
        for user in users.values():
            if email in user['E-mail']:
                password = input('Input password: ')
                if password in user['Password']:
                    print('Hello, ' + user['Name'])
                    my_user_online.update(user)
                else:
                    print(errors[1])
                request = int(input('''1 - Make order
                '''))
                if request == 1:
                    print(drivers)
                    choice = int(input('Input driver id: '))
                    point = int(input('Point: '))
                    order = Order(point)
                    order_id = randint(1000, 9999)
                    orders.update({order_id: {order}})
                    print(order)
    elif request == 5:
        email = input('Input E-mail: ')
        signal = True
        for admin in admins.values():
            if email in admin['E-mail']:
                password = input('Input password: ')
                if password in admin['Password']:
                    print('Hello, Admin')
                else:
                    print(errors[1])
